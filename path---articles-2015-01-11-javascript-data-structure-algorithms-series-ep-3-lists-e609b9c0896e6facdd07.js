webpackJsonp([0xcf0caeccc274],{467:function(n,s){n.exports={data:{site:{siteMetadata:{title:"Blog by Michael Lancaster",subtitle:"Software Engineer focused in Javascript applications",copyright:"© All rights reserved.",author:{name:"Michael Lancaster",twitter:"weblancaster"},url:"http://www.bymichaellancaster.com"}},markdownRemark:{id:"/Users/michaellancaster/Sites/github/michaellancaster-blog/src/pages/articles/2015-01-11-javascript-data-structure-algorithms-series-ep3-lists/index.md absPath of file >>> MarkdownRemark",html:'<div class="intro-series">\n    <strong>Be advised!</strong> <br> \n    This post is part of the series: Data Structures and Algorithms with JS therefore before continue to read I suggest you <a href="/articles/2014-08-06-javascript-data-structure-algorithms-series-ep1/" title="Data Structures and Algorithms Ep.1">the introduction</a> to this series of posts if you haven\'t read yet. thanks.\n</div>\n<p>Let’s get start and see how data structures can help us design better software solutions…today I’m going to talk briefly about Lists</p>\n<h3>Lists</h3>\n<p>Answer out and loud what are lists? … Yes that’s it. We all intuitively understand what lists are but to be more clear Lists are simply a collection of items therefore a To-Do list, Grocery shop list, book list, Phone number list and so on.</p>\n<p>In computer programing Lists are under the ADT (Abstract Data Type) category and can have order/or not (each element has your position) where the element can be duplicated or there’s no restrictions on different data types but usually assumed to have the same data type so lists are useful when search and sorted order <strong>isn’t</strong> in need which otherwise would perform a slow and complex data structure design.</p>\n<p>A list is said to be <code class="language-text">empty</code> when it contains no elements. The number of elements currently stored is called the <code class="language-text">length</code> of the list. The beginning of the list is called the <code class="language-text">head</code>, the end of the list is called the <code class="language-text">tail</code>.</p>\n<p>The basic operations we want on a list is to increase and decrease in size adding and removing new elements..We also want to add or remove elements on any position of the list.. access the element value either to just read or change it.. Access the next or prev based on the current element.. we also want to be able to create new lists or clear one.</p>\n<p>So here’s our actions.</p>\n<ul>\n<li><code class="language-text">position</code> current position in the list where any action will take place</li>\n<li><code class="language-text">currPos</code> return the position of the current element</li>\n<li><code class="language-text">clear</code> remove all elements of the list</li>\n<li><code class="language-text">insertAfter</code> insert an element after target specified in the list</li>\n<li><code class="language-text">insertBefore</code> insert an element before target specified in the list</li>\n<li><code class="language-text">append</code> an element to the end of the list</li>\n<li><code class="language-text">remove</code> an element from the list</li>\n<li><code class="language-text">length</code> number of elements in the list</li>\n<li><code class="language-text">find</code> an element in the list and return the position of the element</li>\n<li><code class="language-text">contains</code> an element in the list return boolean</li>\n<li><code class="language-text">head</code> set current position to first element in the list</li>\n<li><code class="language-text">tail</code> set current position to last element in the list</li>\n<li><code class="language-text">prev</code> set the current position one step left of the current position, no change if already at beginning</li>\n<li><code class="language-text">next</code> set the current position one step right of the current position, no change if already at end</li>\n<li><code class="language-text">moveTo</code> move current position to specified position</li>\n<li><code class="language-text">to String</code> return string representation of the list</li>\n<li><code class="language-text">getElement</code> return element of the current position in the list</li>\n</ul>\n<p>That being said lets get our hands dirty.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token comment">/**\n * List constructor\n * @class List\n */</span>\n<span class="token keyword">function</span> <span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>listSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">/**\n * Return current position in the list\n * @return {[number]} list current position\n * @method currPos\n */</span>\nList<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">currPos</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>position<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">/**\n * Insert element after specified target element in the list\n * @method insertAfter\n */</span>\nList<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">insertAfter</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>after<span class="token punctuation">,</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> target <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>after<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span> target <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>target <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token operator">++</span><span class="token keyword">this</span><span class="token punctuation">.</span>listSize<span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">/**\n * Insert element before specified target element in the list\n * @method insertBefore\n */</span>\nList<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">insertBefore</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>before<span class="token punctuation">,</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> target <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>before<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span> target <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token operator">++</span><span class="token keyword">this</span><span class="token punctuation">.</span>listSize<span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">/**\n * Remove specified element in the list\n * @param  element [specified element in the list to be removed]\n * @method remove\n */</span>\nList<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">remove</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> target <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span> target <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token operator">--</span><span class="token keyword">this</span><span class="token punctuation">.</span>listSize<span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">/**\n * Add element at the next available position\n * which is equal to the listSize\n * also increment the listSize by 1 when\n * adding a new element\n * @method append\n */</span>\nList<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">append</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>listSize<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">/**\n * Responsible to return the number of\n * books in the list\n * @return {[number]} [number of books in the list]\n * @method \n */</span>\nList<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">length</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>listSize<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">/**\n * Responsible to check if book list is empty\n * @return {Boolean}\n * @method isEmpty\n */</span>\nList<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">isEmpty</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">.</span>listSize <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">/**\n * Clear all elements in the list\n * @method clear\n */</span>\nList<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">clear</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">/**\n * Move current position to the front/first in the list\n * @method head\n */</span>\nList<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">head</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">/**\n * Move current position to the end in the list\n * @method tail\n */</span>\nList<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">tail</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>listSize<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">/**\n * Set current position on step left/back in the list\n * if not at the first element\n * @method prev\n */</span>\nList<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">prev</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">.</span>position <span class="token operator">!==</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token operator">--</span><span class="token keyword">this</span><span class="token punctuation">.</span>position<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">/**\n * Set current position on step right in the list\n * if not at the end/tail element\n * @method next\n */</span>\nList<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">next</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">.</span>position <span class="token operator">!==</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>listSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token operator">++</span><span class="token keyword">this</span><span class="token punctuation">.</span>position<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">/**\n * Return string representation of the list\n * @return {[string]} list as string\n * @method toString\n */</span>\nList<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">toString</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">/**\n * Find element and return it\'s position\n * @param  {[type]} element [element to be search]\n * @return {[number]} element position\n * @method find\n */</span>\nList<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">find</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> element <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> i<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">/**\n * Find an element in the list\n * and returns true if exist or false if not\n * @param  element [element to be added in the list]\n * @return {[boolean]}\n * @method contains\n */</span>\nList<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">contains</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> element <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">/**\n * Move current to specified position\n * @param  {[number]} position\n * @return {[type]}          [description]\n */</span>\nList<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">moveTo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>position<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span> position <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">||</span> position <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>listSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>position <span class="token operator">=</span> position<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">/**\n * Return current element in list\n * @method getElement\n */</span>\nList<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getElement</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>position<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">/**\n * This method was created to log/debug the list\n * @debug\n */</span>\nList<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">debug</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> options <span class="token operator">=</span> options <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n        options<span class="token punctuation">.</span>list <span class="token operator">=</span> options<span class="token punctuation">.</span>list <span class="token operator">||</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n        options<span class="token punctuation">.</span>position <span class="token operator">=</span> options<span class="token punctuation">.</span>position <span class="token operator">||</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n        options<span class="token punctuation">.</span>toString <span class="token operator">=</span> options<span class="token punctuation">.</span>toString <span class="token operator">||</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n        options<span class="token punctuation">.</span>getElement <span class="token operator">=</span> options<span class="token punctuation">.</span>getElement <span class="token operator">||</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n        options<span class="token punctuation">.</span>listSize <span class="token operator">=</span> options<span class="token punctuation">.</span>listSize <span class="token operator">||</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n        options<span class="token punctuation">.</span>contains <span class="token operator">=</span> options<span class="token punctuation">.</span>contains <span class="token operator">||</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n        options<span class="token punctuation">.</span>isEmpty <span class="token operator">=</span> options<span class="token punctuation">.</span>isEmpty <span class="token operator">||</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span> options<span class="token punctuation">.</span>list <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'list >>\'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span> options<span class="token punctuation">.</span>position <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'position >>\'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">currPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span> options<span class="token punctuation">.</span>toString <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'string >>\'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span> options<span class="token punctuation">.</span>getElement <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Current element >>\'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span> options<span class="token punctuation">.</span>listSize <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'List size >>\'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>listSize <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span> options<span class="token punctuation">.</span>contains <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Contains element >>\'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>contains<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span> options<span class="token punctuation">.</span>isEmpty <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'is empty >>\'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>the code example above show all methods and properties our list need to have and I also added a method call <code class="language-text">debug</code> so we can do some simple debug/log.</p>\n<p>Let’s create a list of movies and at the end lets use our simple test method</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token comment">/**\n* Movie list\n*/</span>\n<span class="token keyword">var</span> movies <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// add action</span>\nmovies<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">\'Matrix\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmovies<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">\'Inception\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmovies<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">\'The Wolf of Wall Street\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmovies<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">\'Batman\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmovies<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">\'G.I Joe\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmovies<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">\'Interstellar\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// move action</span>\nmovies<span class="token punctuation">.</span><span class="token function">tail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmovies<span class="token punctuation">.</span><span class="token function">prev</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmovies<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmovies<span class="token punctuation">.</span><span class="token function">head</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// delete action</span>\nmovies<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">\'G.I Joe\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// add at specified position</span>\nmovies<span class="token punctuation">.</span><span class="token function">insertAfter</span><span class="token punctuation">(</span><span class="token string">\'Matrix\'</span><span class="token punctuation">,</span> <span class="token string">\'G.I Joe\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmovies<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span><span class="token string">\'G.I Joe\'</span><span class="token punctuation">,</span> <span class="token string">\'The theory of everything\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Debug list</span>\nmovies<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    list<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    position<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    toString<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    getElement<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    listSize<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    contains<span class="token punctuation">:</span> <span class="token string">\'Batman\'</span><span class="token punctuation">,</span>\n    isEmpty<span class="token punctuation">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>And this is was the Ep.3 about Data Structures and Algorithms - Lists.</p>\n<p>Cheers!</p>',
fields:{date:"2015-01-11"},frontmatter:{title:"Ep.3 Data Structures and Algorithms with JS - Lists",description:"Let's get start and see how data structures can help us design better software solutions...today I'm going to talk briefly about Lists"}}},pathContext:{slug:"/articles/2015-01-11-javascript-data-structure-algorithms-series-ep3-lists/"}}}});
//# sourceMappingURL=path---articles-2015-01-11-javascript-data-structure-algorithms-series-ep-3-lists-e609b9c0896e6facdd07.js.map