webpackJsonp([0xe0fe67b78fea],{467:function(n,s){n.exports={data:{site:{siteMetadata:{title:"Blog by Michael Lancaster",subtitle:"Software Engineer focused in Javascript applications",copyright:"© All rights reserved.",author:{name:"Michael Lancaster",twitter:"weblancaster"},url:"http://www.bymichaellancaster.com"}},markdownRemark:{id:"/Users/michaellancaster/Sites/github/michaellancaster-blog/src/pages/articles/2014-09-03-javascript-data-structure-algorithms-series-ep2-arrays/index.md absPath of file >>> MarkdownRemark",html:'<div class="intro-series">\n    This post is part of the series: Data Structures and Algorithms with JS therefore before continue to read I suggest you <a href="/articles/2014-08-06-javascript-data-structure-algorithms-series-ep1/" title="Data Structures and Algorithms Ep.1">the introduction</a> to this series of posts if you haven\'t read yet. thanks.\n</div>\n<h3>Brushing up on Arrays</h3>\n<p>This is the second post on the series of Data Structure and Algorithms with JS - focused on Array. <br>\nNotice that this is a overview/start point for those that need to brush up your knowledge on Arrays where we are going to be using in the future on more complex topics.</p>\n<p>Every programming language has sort of a built-in Array where you can access data via index and most of these languages has a strict type of Array which would be integer BUT not in Javascript, where Array is also an object which when integers used for index they are converted to strings. <br>\nAnd Array being an object means that it contain properties and functions you can use out of the box.</p>\n<p>In Javascript we don’t need to define the length of our Array as in C++ and we can have different types of values therefore making Arrays in Javascript flexible and easier to manipulate than other classic languages.</p>\n<h3>Creating Arrays</h3>\n<p>Let’s create an Array with length zero:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// arr.length = 0</span></code></pre>\n      </div>\n<p>Now let’s create an Array with some elements defined and length equal 5:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'a\'</span><span class="token punctuation">,</span> <span class="token string">\'b\'</span><span class="token punctuation">,</span> <span class="token string">\'c\'</span><span class="token punctuation">,</span> <span class="token string">\'d\'</span><span class="token punctuation">,</span> <span class="token string">\'e\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// arr.length = 5</span></code></pre>\n      </div>\n<p>Array with different types would look like:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'michael\'</span><span class="token punctuation">,</span> <span class="token string">\'lancaster\'</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>If you want to verify if an object is an Array you can use the method <code class="language-text">Arrays.isArray()</code></p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'a\'</span><span class="token punctuation">,</span> <span class="token string">\'b\'</span><span class="token punctuation">,</span> <span class="token string">\'c\'</span><span class="token punctuation">,</span> <span class="token string">\'d\'</span><span class="token punctuation">,</span> <span class="token string">\'e\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nArray<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n\n<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">\'Michael Lancaster\'</span><span class="token punctuation">;</span>\nArray<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></code></pre>\n      </div>\n<h3>Accessing</h3>\n<p>Use the operator <code class="language-text">[]</code> passing the index to access the value/element.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'a\'</span><span class="token punctuation">,</span> <span class="token string">\'b\'</span><span class="token punctuation">,</span> <span class="token string">\'c\'</span><span class="token punctuation">,</span> <span class="token string">\'d\'</span><span class="token punctuation">,</span> <span class="token string">\'e\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token comment">// c</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> arr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token comment">// e</span></code></pre>\n      </div>\n<p>Also iterating through an Array sequentially</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Index: \'</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> <span class="token string">\'Value: \'</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// outputs</span>\n<span class="token comment">// Index: 0 Value: 1</span>\n<span class="token comment">// Index: 1 Value: 2</span>\n<span class="token comment">// Index: 2 Value: 3</span>\n<span class="token comment">// Index: 3 Value: 4</span>\n<span class="token comment">// Index: 4 Value: 5 </span></code></pre>\n      </div>\n<p>Notice on the sample above that the loop is controlled by the length of the Array <code class="language-text">arr.length</code> since in Javascript Array is an object and it can be modified so we guarantee that we have gone through all indexes.</p>\n<h3>Array from String</h3>\n<p>We can also create Arrays from strings defining a delimiter (<code class="language-text">space</code> in my case).</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">\'Michael lancaster 23 and developer\'</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> arr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">\' \'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["Michael", "lancaster", "23", "and", "developer"]</span></code></pre>\n      </div>\n<h3>Object Copy</h3>\n<p>There’s several ways of Object copy <code class="language-text">Shallow Copy</code>, <code class="language-text">Deep Copy</code> and <code class="language-text">Lazy Copy</code>.</p>\n<p>The <code class="language-text">Shallow Copy</code> is when you assign “B = A” which has the disadvantage of when updating Array A the Array B will also be modified with same updates as A no matter what. Here’s an example of <code class="language-text">Shallow Copy</code>.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> arr2 <span class="token operator">=</span> arr1<span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span> <span class="token comment">// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span>\narr1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">\'michael\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span> <span class="token comment">// 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, "michael"]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span> <span class="token comment">// 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, "michael"]</span></code></pre>\n      </div>\n<p>When we pushed a new value to the end of <code class="language-text">arr1</code> this change is reflected into <code class="language-text">arr2</code>.</p>\n<p>A better way to do a copy would be the <code class="language-text">Deep Copy</code> which one don’t depend on another but it’s a slower operation. <br>\nHere’s an example of <code class="language-text">Deep Copy</code></p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">deepCopy</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span> <span class="token comment">// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span> <span class="token comment">// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span>\narr1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">\'michael\'</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span> <span class="token comment">// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, "michael"] </span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span> <span class="token comment">// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></code></pre>\n      </div>\n<p>In the example above you can notice that the value pushed to <code class="language-text">arr1</code> do not reflected into <code class="language-text">arr2</code>.\nNow. <code class="language-text">Lazy Copy</code> is the combination of both operations.</p>\n<h3>Array traversal and mutation operations</h3>\n<p>Array is list-like and also a constructor that contains prototype methods to perform traversal and mutation operations such as:</p>\n<p><strong>Searching a value</strong></p>\n<p>Searching a value can be done with the method <code class="language-text">Array.prototype.indexOf()</code> which perform an operation of comparing with <code class="language-text">===</code> the value passed to the function is found and return it’s index position otherwise will return -1.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> languages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'Javascript\'</span><span class="token punctuation">,</span> <span class="token string">\'Java\'</span><span class="token punctuation">,</span> <span class="token string">\'C++\'</span><span class="token punctuation">,</span> <span class="token string">\'Go\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nlanguages<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">\'C++\'</span><span class="token punctuation">)</span> <span class="token comment">// 2</span></code></pre>\n      </div>\n<p>Notice that this search operation using the <code class="language-text">indexOf</code> will return the just the position of the <code class="language-text">first</code> value encountered in the Array.\nYou can also the ‘lastIndexOf’ which will do the same but return the position of the last value encountered.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> languages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'Javascript\'</span><span class="token punctuation">,</span> <span class="token string">\'Java\'</span><span class="token punctuation">,</span> <span class="token string">\'C++\'</span><span class="token punctuation">,</span> <span class="token string">\'Go\'</span><span class="token punctuation">,</span> <span class="token string">\'Lua\'</span><span class="token punctuation">,</span> <span class="token string">\'C++\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nlanguages<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">\'C++\'</span><span class="token punctuation">)</span> <span class="token comment">// 5</span></code></pre>\n      </div>\n<p><strong>String from Arrays</strong></p>\n<p>There’s two methods to return a string representation from an Array <code class="language-text">Array.prototype.join()</code> and <code class="language-text">Array.prototype.toString()</code>. <br>\nIt’s automatically delimited by commas but you can pass your delimiter on the method. Here’s an example using <code class="language-text">join</code> and <code class="language-text">toString</code>.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> languages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'Javascript\'</span><span class="token punctuation">,</span> <span class="token string">\'Java\'</span><span class="token punctuation">,</span> <span class="token string">\'C++\'</span><span class="token punctuation">,</span> <span class="token string">\'Go\'</span><span class="token punctuation">,</span> <span class="token string">\'Lua\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nlanguages<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "Javascript,Java,C++,Go,Lua"</span>\nlanguages<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "Javascript,Java,C++,Go,Lua"</span></code></pre>\n      </div>\n<p><strong>New Array from Array</strong></p>\n<p>There’s also multiple methods to create an Array from another Array <code class="language-text">Array.prototype.concat()</code> and <code class="language-text">Array.prototype.splice()</code>.\nThe <code class="language-text">Array.prototype.concat()</code> method allow you to pass one or more Arrays/Values as argument to create a new Array.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> cats <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'Abyssinian\'</span><span class="token punctuation">,</span> <span class="token string">\'Persian\'</span><span class="token punctuation">,</span> <span class="token string">\'Peterbald\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> dogs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'Alaskan Klee Kai\'</span><span class="token punctuation">,</span> <span class="token string">\'American Bulldog\'</span><span class="token punctuation">,</span> <span class="token string">\'Pitbull\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> birds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'Malleefowl\'</span><span class="token punctuation">,</span> <span class="token string">\'Maleo\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> petAnimals <span class="token operator">=</span> cats<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>dogs<span class="token punctuation">,</span> birds<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>petAnimals<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["Abyssinian", "Persian", "Peterbald", "Alaskan Klee Kai", "American Bulldog", "Pitbull", "Malleefowl", "Maleo"];</span></code></pre>\n      </div>\n<p>The <code class="language-text">Array.prototype.splice()</code> takes two arguments (minimum) or more. You can also use to add new elements to the middle of an Array. <br>\nThey are going to be used to mutate the Array therefore it can add new elements and/or remove old elements.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> dogs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'Alaskan Klee Kai\'</span><span class="token punctuation">,</span> <span class="token string">\'American Bulldog\'</span><span class="token punctuation">,</span> <span class="token string">\'Pitbull\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> removedDogs <span class="token operator">=</span> dogs<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"Bull Terrier"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dogs<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["Alaskan Klee Kai", "American Bulldog", "Bull Terrier", "Pitbull"]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>removedDogs<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [] empty since no values/elements were removed</span></code></pre>\n      </div>\n<p>Above the order of my arguments are <code class="language-text">.splice(from index, remove, enter new element)</code> so looking at my arguments we have inserted a new value <code class="language-text">Bull terrier</code> removed <code class="language-text">0</code> and started at index <code class="language-text">2</code>.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> dogs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'Alaskan Klee Kai\'</span><span class="token punctuation">,</span> <span class="token string">\'American Bulldog\'</span><span class="token punctuation">,</span> <span class="token string">\'Pitbull\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> removedDogs <span class="token operator">=</span> dogs<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Bull Terrier"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dogs<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["Alaskan Klee Kai", "Bull Terrier", "Pitbull"]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>removedDogs<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["American Bulldog"]</span></code></pre>\n      </div>\n<p>The code above I said .splice <code class="language-text">from index 1, remove index 1, insert &#39;Bull Terrier&#39;</code> so now the variable <code class="language-text">removedDogs</code> contain the item removed from the index defined which in this case is <code class="language-text">1</code>.</p>\n<h3>Adding elements/values to an Array</h3>\n<p>So instead of use the length of an Array to add an element to the end or even harder to add an element to the beginning of an Array which you would have to iterate through the Array and shift the index from the end towards start.\nAnyway. Let’s keep it simple with these two methods to add new elements to an Array <code class="language-text">Array.prototype.push()</code> add to the end of an Array and <code class="language-text">Array.prototype.unshift()</code> add to the beginning of an Array (Both methods accept multiple values/elements passed as arguments). <br></p>\n<p>The <code class="language-text">push()</code> function/method add a value/element to the end of an Array.<br>\nHere’s an example.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> dogs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'Alaskan Klee Kai\'</span><span class="token punctuation">,</span> <span class="token string">\'American Bulldog\'</span><span class="token punctuation">,</span> <span class="token string">\'Pitbull\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dogs<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [\'Alaskan Klee Kai\', \'American Bulldog\', \'Pitbull\'];</span>\n\ndogs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">\'Bull Terrier\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dogs<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["Alaskan Klee Kai", "American Bulldog", "Pitbull", "Bull Terrier"]</span></code></pre>\n      </div>\n<p>The <code class="language-text">unshift()</code> function/method add a value/element to the beginning of an Array. <br>\nHere’s an example.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> dogs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'Alaskan Klee Kai\'</span><span class="token punctuation">,</span> <span class="token string">\'American Bulldog\'</span><span class="token punctuation">,</span> <span class="token string">\'Pitbull\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dogs<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [\'Alaskan Klee Kai\', \'American Bulldog\', \'Pitbull\'];</span>\n\ndogs<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token string">\'American Bulldog\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dogs<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["American Bulldog", "Alaskan Klee Kai", "American Bulldog", "Pitbull"]</span></code></pre>\n      </div>\n<h3>Removing elements/values from an Array</h3>\n<p>There’s also two methods to remove values/elements from an Array where you can remove the beginning using <code class="language-text">Array.prototype.shift()</code> or if you want to remove from the end you can use <code class="language-text">Array.prototype.pop()</code>.</p>\n<p>Here’s an example to remove the first element using the <code class="language-text">Array.prototype.shift()</code> method.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> dogs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'Alaskan Klee Kai\'</span><span class="token punctuation">,</span> <span class="token string">\'American Bulldog\'</span><span class="token punctuation">,</span> <span class="token string">\'Pitbull\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dogs<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [\'Alaskan Klee Kai\', \'American Bulldog\', \'Pitbull\'];</span>\n\ndogs<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dogs<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ \'American Bulldog\', \'Pitbull\'];</span></code></pre>\n      </div>\n<p>And here’s an example to remove the last element using the <code class="language-text">Array.prototype.pop()</code> method.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> dogs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'Alaskan Klee Kai\'</span><span class="token punctuation">,</span> <span class="token string">\'American Bulldog\'</span><span class="token punctuation">,</span> <span class="token string">\'Pitbull\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dogs<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [\'Alaskan Klee Kai\', \'American Bulldog\', \'Pitbull\'];</span>\n\ndogs<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dogs<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [\'Alaskan Klee Kai\', \'American Bulldog\'];</span></code></pre>\n      </div>\n<h3>Ordering/Sorting elements</h3>\n<p>There’s also two ways to order/sort an Array <code class="language-text">Array.prototype.reverse()</code> which are going to do what says and <code class="language-text">Array.prototype.sort()</code> to put elements in order but in this case the method <code class="language-text">Array.prototype.sort()</code> turns every value in strings so if you have numbers you are going to need to pass a function and order the numbers.</p>\n<p>Here’s an example of <code class="language-text">Array.prototype.reverse()</code>.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> dogs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'Alaskan Klee Kai\'</span><span class="token punctuation">,</span> <span class="token string">\'American Bulldog\'</span><span class="token punctuation">,</span> <span class="token string">\'Pitbull\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dogs<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [\'Alaskan Klee Kai\', \'American Bulldog\', \'Pitbull\'];</span>\n\ndogs<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dogs<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["Pitbull", "American Bulldog", "Alaskan Klee Kai"];</span></code></pre>\n      </div>\n<p>Here’s an example of <code class="language-text">Array.prototype.sort()</code> with strings.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> alphabet <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'a\'</span><span class="token punctuation">,</span> <span class="token string">\'b\'</span><span class="token punctuation">,</span> <span class="token string">\'e\'</span><span class="token punctuation">,</span> <span class="token string">\'z\'</span><span class="token punctuation">,</span> <span class="token string">\'f\'</span><span class="token punctuation">,</span> <span class="token string">\'c\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>alphabet<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [\'a\', \'b\', \'e\', \'z\', \'f\', \'c\']</span>\n\nalphabet<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>alphabet<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["a", "b", "c", "e", "f", "z"]</span></code></pre>\n      </div>\n<p>And here’s an example of how to pass a function to <code class="language-text">Array.prototype.sort()</code> to order numbers.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token comment">// [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]</span>\n\nnums<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> n1 <span class="token operator">-</span> n2<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token comment">// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></code></pre>\n      </div>\n<h3>Iterator methods</h3>\n<p>The iterator methods/functions are going to be applied for each value/element and may or may not return a new array, groups of values or just a value as result of the operation.</p>\n<p>First let’s talk about the <code class="language-text">Array.prototype.forEach()</code> which receive a callback as argument and this callback has three arguments respectively <code class="language-text">element</code>, <code class="language-text">index</code>, <code class="language-text">array being traversed</code> going to iterate on ascending order. <br>\nHere’s an example using <code class="language-text">Array.prototype.forEach()</code>.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> dogs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'Alaskan Klee Kai\'</span><span class="token punctuation">,</span> <span class="token string">\'American Bulldog\'</span><span class="token punctuation">,</span> <span class="token string">\'Pitbull\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\ndogs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Dog breed: \'</span> <span class="token operator">+</span> value <span class="token operator">+</span> <span class="token string">\', position: \'</span> <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// outputs</span>\n<span class="token comment">// Dog breed: Alaskan Klee Kai, position: 0</span>\n<span class="token comment">// Dog breed: American Bulldog, position: 1</span>\n<span class="token comment">// Dog breed: Pitbull, position: 2 </span></code></pre>\n      </div>\n<p>Now it’s time to show the <code class="language-text">Array.prototype.every()</code> which test a condition against each element and return true in case all elements meet the condition or false. <br>\nAlso receives a callback as argument and this callback has three arguments respectively <code class="language-text">element</code>, <code class="language-text">index</code>, <code class="language-text">array being traversed</code>.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span>\n\n<span class="token keyword">var</span> meetCondition <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>element <span class="token operator">&lt;</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>meetCondition<span class="token punctuation">)</span> <span class="token comment">// true</span></code></pre>\n      </div>\n<p>In the code above all elements are tested against the condition to check if they are less than 11 in our case all elements are less than 11 so the result returned is true.</p>\n<p>The method/function <code class="language-text">Array.prototype.some()</code> works almost the same way as <code class="language-text">Array.prototype.every()</code> but in this case if at least one element meet the condition would return true.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span>\n\n<span class="token keyword">var</span> meetCondition <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>element <span class="token operator">===</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>meetCondition<span class="token punctuation">)</span> <span class="token comment">// true</span></code></pre>\n      </div>\n<p>The <code class="language-text">Array.prototype.reduce()</code> method run a function against an accumulator for each element until reduce to one single value.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\nnums<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'a\'</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n   \tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'b\'</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n   \tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'result accumulated is: \'</span><span class="token punctuation">,</span> a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// output</span>\n\n<span class="token comment">// a 100</span>\n<span class="token comment">// b 200</span>\n<span class="token comment">// result accumulated is: 300</span>\n<span class="token comment">// a 300</span>\n<span class="token comment">// b 300</span>\n<span class="token comment">// result accumulated is: 600</span>\n<span class="token comment">// a 600</span>\n<span class="token comment">// b 400</span>\n<span class="token comment">// result accumulated is: 1000</span></code></pre>\n      </div>\n<p>As you can see our method <code class="language-text">Array.prototype.reduce()</code> receive a function with two arguments <code class="language-text">previous value</code> and <code class="language-text">current value</code> a + b which the result turns into the <code class="language-text">accumulator</code> a and then calculate this result against the next in line which is b and so on so forth. <br>\nYou can also pass <code class="language-text">initial value</code> where it’s going to turn into the <code class="language-text">previous value</code> and the original <code class="language-text">previous value</code> turn into <code class="language-text">current value</code>.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\nnums<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'a\'</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n   \tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'b\'</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n   \tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'result accumulated is: \'</span><span class="token punctuation">,</span> a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// output</span>\n\n<span class="token comment">// a 200</span>\n<span class="token comment">// b 100</span>\n<span class="token comment">// result accumulated is: 300</span>\n<span class="token comment">// a 300</span>\n<span class="token comment">// b 200</span>\n<span class="token comment">// result accumulated is: 500</span>\n<span class="token comment">// a 500</span>\n<span class="token comment">// b 300</span>\n<span class="token comment">// result accumulated is: 800</span>\n<span class="token comment">// a 800</span>\n<span class="token comment">// b 400</span>\n<span class="token comment">// result accumulated is: 1200</span>\n<span class="token comment">// 1200</span></code></pre>\n      </div>\n<p>There’s also the possibility to use <code class="language-text">Array.prototype.reduceRight()</code> which is going to perform the function on each element of the array from the end to start.</p>\n<p>the <code class="language-text">Array.prototype.map()</code> method works the same way <code class="language-text">Array.prototype.forEach()</code> method works but return a new Array as the difference between the two methods.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> dogs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'Alaskan Klee Kai\'</span><span class="token punctuation">,</span> <span class="token string">\'American Bulldog\'</span><span class="token punctuation">,</span> <span class="token string">\'Pitbull\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> newArr <span class="token operator">=</span> dogs<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Dog breed: \'</span> <span class="token operator">+</span> value <span class="token operator">+</span> <span class="token string">\', position: \'</span> <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> value<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// outputs</span>\n<span class="token comment">// Dog breed: Alaskan Klee Kai, position: 0</span>\n<span class="token comment">// Dog breed: American Bulldog, position: 1</span>\n<span class="token comment">// Dog breed: Pitbull, position: 2 </span>\n\n<span class="token comment">// ["Alaskan Klee Kai", "American Bulldog", "Pitbull"]</span></code></pre>\n      </div>\n<p>The <code class="language-text">Array.prototype.filter()</code> method works almost the same way as <code class="language-text">Array.prototype.every()</code> but instead return an Array with the elements that met the condition <code class="language-text">true</code>.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span>\n\n<span class="token keyword">var</span> numsLessThan5 <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>element <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numsLessThan5<span class="token punctuation">)</span> <span class="token comment">// [0, 1, 2, 3, 4] </span></code></pre>\n      </div>\n<h3>That’s it</h3>\n<p>I hope you have brush up on your Array knowledge being aware of we can use and will use more complex approaches applying some of the topics I covered on this post. <br></p>\n<p>Cheers!</p>\n<p><small>* Don’t be shy. I will appreciate any improvement and/or fix.</small></p>',
fields:{date:"2014-09-03"},frontmatter:{title:"Ep.2 Data Structures and Algorithms with JS - Arrays",description:"This is the second post on the series of Data Structure and Algorithms with JS - focused on Array. Notice that this is a overview/start point for those that need to brush up your knowledge on Arrays where we are going to be using on the future with more complex posts."}}},pathContext:{slug:"/articles/2014-09-03-javascript-data-structure-algorithms-series-ep2-arrays/"}}}});
//# sourceMappingURL=path---articles-2014-09-03-javascript-data-structure-algorithms-series-ep-2-arrays-ef0da9523987da1efdef.js.map